type Query {
    getVehicleById(id: ID!): Vehicle
    getVehicles(filter: String, skip: Int, first: Int, orderBy: VehicleOrderByInput): [Vehicle]
}

type Mutation {
    createVehicle(
        vehicleID: String, 
        route: Route, 
        predictable: Boolean, 
        runID: String, 
        latitude: Float, 
        longitude: Float, 
        heading: Int, 
        timeSinceReport: Int, 
        dayOfWeek: DayOfWeek, 
        dataLoad: Json
    ): Vehicle
}

type Vehicle {
    id: ID!
    vehicleID: String
    route: Route
    predictable: Boolean
    runID: String
    latitude: Float
    longitude: Float
    heading: Int
    timeSinceReport: Int
    dayOfWeek: DayOfWeek
    dataLoad: Json
}

type Route {
    id: ID!
    routeID: String
    vehicles: [Vehicle]
}

enum VehicleOrderByInput {
    vehicleID_ASC
    vehicleID_DESC
    heading_ASC
    heading_DESC
    timeSinceReport_ASC
    timeSinceReport_DESC
    createdAt_ASC
    createdAt_DESC
}

enum DayOfWeek {
    Sunday
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
}